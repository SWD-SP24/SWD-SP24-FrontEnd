import React, { useEffect, useState } from "react";
import { API_KEY } from "../../../../chatbotkey";

const API_URL =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export default function AIAnalysis({ indicators }) {
    const [aiResponse, setAiResponse] = useState("");
    const age = localStorage.getItem("userAge");
    const bloodType = localStorage.getItem("bloodType");
    const gender = localStorage.getItem("gender");

    useEffect(() => {
        if (!indicators || indicators.length === 0) return;

        const fetchAIResponse = async () => {
            try {
                const response = await fetch(`${API_URL}?key=${API_KEY}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [
                            {
                                parts: [
                                    {
                                        text: `
                                        üìä **AI Analysis - Ti√™m Ch·ªßng & S·ª©c Kh·ªèe RƒÉng Mi·ªáng**
                                        **Th√¥ng tin c√° nh√¢n:**
                                        - **Tu·ªïi:** ${age}
                                        - **Nh√≥m m√°u:** ${bloodType}
                                        - **Gi·ªõi t√≠nh:** ${gender}
    
                                        **Ph√¢n t√≠ch AI:** 
                                        D·ª±a tr√™n ƒë·ªô tu·ªïi, nh√≥m m√°u v√† gi·ªõi t√≠nh, h√£y ƒë∆∞a ra nh·∫≠n x√©t v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe rƒÉng mi·ªáng ph√π h·ª£p.
                                        **L·ªùi khuy√™n v·ªÅ rƒÉng mi·ªáng:**
                                        - V·ªõi ƒë·ªô tu·ªïi n√†y, c√≥ nguy c∆° n√†o v·ªÅ rƒÉng mi·ªáng c·∫ßn l∆∞u √Ω kh√¥ng?
                                        - N√™n c√≥ th√≥i quen v·ªá sinh rƒÉng mi·ªáng nh∆∞ th·∫ø n√†o?
                                        - Khi n√†o c·∫ßn ƒëi kh√°m nha khoa ƒë·ªãnh k·ª≥?
                                        Tr·∫£ l·ªùi v·ªõi ƒë·ªô d√†i v·ª´a ph·∫£i, kh√¥ng qu√° d√†i
                                        `
                                    }
                                ]
                            }
                        ]
                    })

                });

                const data = await response.json();
                if (data && data.candidates) {
                    let rawText = data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
                    let formattedText = rawText
                        .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // B√¥i ƒë·∫≠m
                        .replace(/\*(.*?)\*/g, "<em>$1</em>") // In nghi√™ng
                        .replace(/\n/g, "<br />") // Xu·ªëng d√≤ng
                        .replace(/\- /g, "‚Ä¢ "); // Thay th·∫ø d·∫•u "-" th√†nh "‚Ä¢"

                    setAiResponse(formattedText);
                }
            } catch (error) {
                console.error("L·ªói khi g·ªçi API AI:", error);
                setAiResponse("L·ªói khi l·∫•y ph·∫£n h·ªìi t·ª´ AI.");
            }
        };

        fetchAIResponse();
    }, [indicators]);

    return (
        <div className="card mt-4">
            <h5 className="card-header">AI Analysis</h5>
            <div className="card-body">
                <div dangerouslySetInnerHTML={{ __html: aiResponse || "ƒêang ph√¢n t√≠ch..." }} />
            </div>
        </div>
    );
}
