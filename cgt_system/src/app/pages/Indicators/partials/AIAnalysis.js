import React, { useEffect, useState } from "react";
import { API_KEY } from "../../../../chatbotkey";

const API_URL =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export default function AIAnalysis({ indicators }) {
    const [aiResponse, setAiResponse] = useState("");
    const age = localStorage.getItem("userAge");
    const bloodType = localStorage.getItem("bloodType");
    const gender = localStorage.getItem("gender");
    useEffect(() => {
        if (!indicators || indicators.length === 0) return;

        const fetchAIResponse = async () => {
            try {
                const response = await fetch(`${API_URL}?key=${API_KEY}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [
                            {
                                parts: [
                                    {
                                        text: `D∆∞·ªõi ƒë√¢y l√† ch·ªâ s·ªë m·ªõi nh·∫•t c·ªßa tr·∫ª: ${JSON.stringify(indicators[0])}.  
                                               Tu·ªïi: ${age}, Nh√≥m m√°u: ${bloodType}, Gi·ªõi t√≠nh: ${gender}.  
                                               H√£y ph√¢n t√≠ch v√† ph·∫£n h·ªìi theo ƒë√∫ng format sau:  
                                               ---  
üìä                                            **Ph√¢n t√≠ch c·ªßa AI**  
 **Nh·∫≠n x√©t:** {ƒê√°nh gi√° nhanh v·ªÅ t√¨nh tr·∫°ng hi·ªán t·∫°i, v√≠ d·ª•: c√¢n n·∫∑ng h·ª£p l√Ω, BMI h∆°i th·∫•p, tƒÉng tr∆∞·ªüng t·ªët, so v·ªõi m·∫∑t b·∫±ng chung v·ªÅ ƒë·ªô tu·ªïi, gi·ªõi t√≠nh, nh√≥m m√°u}.  
**L·ªùi khuy√™n:**  
- **Dinh d∆∞·ª°ng:** {G·ª£i √Ω th·ª±c ph·∫©m c·ª• th·ªÉ ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi, v√≠ d·ª•: N·∫øu thi·∫øu c√¢n, n√™n b·ªï sung protein, s·ªØa, ng≈© c·ªëc nguy√™n h·∫°t; n·∫øu th·ª´a c√¢n, n√™n h·∫°n ch·∫ø ƒë·ªì ng·ªçt, tƒÉng rau xanh}.  
- **V·∫≠n ƒë·ªông:** {G·ª£i √Ω b√†i t·∫≠p ho·∫∑c ho·∫°t ƒë·ªông ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi, v√≠ d·ª•: N·∫øu c·∫ßn c·∫£i thi·ªán chi·ªÅu cao, n√™n t·∫≠p b∆°i l·ªôi, nh·∫£y d√¢y; n·∫øu mu·ªën ki·ªÉm so√°t c√¢n n·∫∑ng, n√™n ƒëi b·ªô, ƒë·∫°p xe}.  
- **Theo d√µi:** {Khuy·∫øn ngh·ªã ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ ho·∫∑c c√°ch t·ª± theo d√µi ch·ªâ s·ªë}.  
---  
Kh√¥ng th√™m n·ªôi dung n√†o ngo√†i format tr√™n.`
                                    }
                                ]
                            }
                        ]
                    })

                });

                const data = await response.json();
                if (data && data.candidates) {
                    let rawText = data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
                    let formattedText = rawText
                        .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // B√¥i ƒë·∫≠m
                        .replace(/\*(.*?)\*/g, "<em>$1</em>") // In nghi√™ng
                        .replace(/\n/g, "<br />") // Xu·ªëng d√≤ng
                        .replace(/\- /g, "‚Ä¢ "); // Thay th·∫ø d·∫•u "-" th√†nh "‚Ä¢"

                    setAiResponse(formattedText);
                }
            } catch (error) {
                console.error("L·ªói khi g·ªçi API AI:", error);
                setAiResponse("L·ªói khi l·∫•y ph·∫£n h·ªìi t·ª´ AI.");
            }
        };

        fetchAIResponse();
    }, [indicators]);

    return (
        <div className="card mt-4">
            <h5 className="card-header">AI Analysis</h5>
            <div className="card-body">
                <div dangerouslySetInnerHTML={{ __html: aiResponse || "ƒêang ph√¢n t√≠ch..." }} />
            </div>
        </div>
    );
}
