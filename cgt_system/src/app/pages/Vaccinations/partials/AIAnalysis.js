import React, { useEffect, useState } from "react";
import { API_KEY } from "../../../../chatbotKey";
import "../vaccine.scss";
const API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export default function AIAnalysis({ indicators }) {
  const [aiResponse, setAiResponse] = useState("");
  const age = localStorage.getItem("userAge");
  const bloodType = localStorage.getItem("bloodType");
  const gender = localStorage.getItem("gender");

  useEffect(() => {
    if (!indicators || indicators.length === 0) return;

    const fetchAIResponse = async () => {
      try {
        const response = await fetch(`${API_URL}?key=${API_KEY}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `
                                    üìä **AI Analysis - Ti√™m Ch·ªßng**
                                    **Th√¥ng tin c√° nh√¢n:**
                                    - **Tu·ªïi:** ${age}
                                    - **Nh√≥m m√°u:** ${bloodType}
                                    - **Gi·ªõi t√≠nh:** ${gender}

                                    **Ph√¢n t√≠ch c·ªßa chuy√™n gia:** 
                                    D·ª±a tr√™n ƒë·ªô tu·ªïi, nh√≥m m√°u v√† gi·ªõi t√≠nh, h√£y ƒë∆∞a ra nh·∫≠n x√©t v·ªÅ t√¨nh tr·∫°ng ti√™m ch·ªßng ph√π h·ª£p.
                                    
                                    **L·ªùi khuy√™n:**
                                    - Nh·ªØng v·∫Øc-xin n√†o th∆∞·ªùng ƒë∆∞·ª£c khuy·∫øn ngh·ªã cho ƒë·ªô tu·ªïi n√†y?
                                    - N·∫øu ch∆∞a ƒë∆∞·ª£c ti√™m ƒë·∫ßy ƒë·ªß, c√°c b∆∞·ªõc ti·∫øp theo n√™n l√†m g√¨?
                                    - L∆∞u √Ω n√†o quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o s·ª©c kh·ªèe t·ªët nh·∫•t?
                                    
                                    `,
                  },
                ],
              },
            ],
          }),
        });

        const data = await response.json();
        if (data && data.candidates) {
          let rawText =
            data.candidates[0]?.content?.parts[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
          let formattedText = rawText
            .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // B√¥i ƒë·∫≠m
            .replace(/\*(.*?)\*/g, "<em>$1</em>") // In nghi√™ng
            .replace(/\n/g, "<br />") // Xu·ªëng d√≤ng
            .replace(/\- /g, "‚Ä¢ "); // Thay th·∫ø d·∫•u "-" th√†nh "‚Ä¢"

          setAiResponse(formattedText);
        }
      } catch (error) {
        console.error("L·ªói khi g·ªçi API AI:", error);
        setAiResponse("L·ªói khi l·∫•y ph·∫£n h·ªìi t·ª´ AI.");
      }
    };

    fetchAIResponse();
  }, [indicators]);

  return (
    <div className="card mt-4">
      <h5 className="card-header">AI Analysis</h5>
      <div className="card-body">
        <div
          dangerouslySetInnerHTML={{
            __html: aiResponse || "Analyzing...",
          }}
        />
      </div>
    </div>
  );
}
